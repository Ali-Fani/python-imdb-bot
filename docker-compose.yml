version: '3.8'

services:
  imdb-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-imdb-bot
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

    # Environment variables from .env file
    env_file:
      - .env

    environment:
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONOPTIMIZE=1
      - REDIS_URL=redis://imdb-bot-redis:6379
      - HEALTH_CHECK_PORT=8080
      - DATABASE_POOL_SIZE=10
      - CACHE_TTL=300

    # Volumes for logs and persistent data
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw

    # Ports for health checks
    ports:
      - "8080:8080"

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

    # Resource limits optimized for production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    # Networks - use default network to avoid conflicts
    networks:
      - default

  # Redis for enhanced caching and performance
  redis:
    image: redis:7-alpine
    container_name: imdb-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Use default network to avoid conflicts
    networks:
      - default

volumes:
  redis_data:
    driver: local

# Remove custom network definition to avoid conflicts